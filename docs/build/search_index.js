var documenterSearchIndex = {"docs":
[{"location":"case/#Running-different-cases","page":"Cases","title":"Running different cases","text":"","category":"section"},{"location":"case/","page":"Cases","title":"Cases","text":"In order to run an existing example, you can use the following lines of code","category":"page"},{"location":"case/","page":"Cases","title":"Cases","text":"  PAMSO_problem = PAMSO.gen_problem(case)\n  PAMSO.run(PAMSO_problem,algo,func_eval)\t","category":"page"},{"location":"case/","page":"Cases","title":"Cases","text":"Here case is a string represnting the case study, algo is the algorithm which can be \"MADS\",\"Bayesopt\" or \"PSO\" and func_eval is the maximum number of function evaluations (approximately). Note that, Bayesopt and PSO does not accept integer parameters. The list of cases is in the next section","category":"page"},{"location":"case/#Cases","page":"Cases","title":"Cases","text":"","category":"section"},{"location":"case/","page":"Cases","title":"Cases","text":"Case Description Number of parameters\nGenerator_expansion Generator expansion for a day with 2 generators. 3\nRTN: 1 week Integrated design and scheduling in an RTN for 1 representative week 6\nRTN: 4 week (disaggregated) Integrated design and scheduling in an RTN for 4 representative weeks with a high-level model formulated based on explicitly having the demand for each week 6\nRTN: 4 week (aggregated) Integrated design and scheduling in an RTN for 4 representative weeks with a high-level model formulated based on the average of daily demand for the weeks 6\nConnected microgrid: 5 locations Integrated planning and scheduling for 5 location microgrid connected to external sources of power 2\nConnected microgrid: 20 locations Integrated planning and scheduling for 20 location microgrid connected to external sources of power 2\nConnected network: 200 locations Integrated planning and scheduling for 200 location network connected to external sources of power 2\nIsolated microgrid: 20 locations Integrated planning and scheduling for 20 location isolated microgrid 2","category":"page"},{"location":"case/","page":"Cases","title":"Cases","text":"Back to Home","category":"page"},{"location":"#PAMSO:-Parametric-Autotuning-Multi-time-Scale-Optimization-Algorithm","page":"Home","title":"PAMSO: Parametric Autotuning Multi-time Scale Optimization Algorithm","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Parametric Autotuning Multi-time Scale Optimization Algorithm (PAMSO), an algorithm to solve multi-time scale optimization models. PAMSO involves tuning parameters in a low-fidelity optimization model to help solve a higher-fidelity multi-time scale optimization model.  The tunable parameters represent the mismatch between the low-fidelity and high-fidelity models and are tuned by forming a black box with these models which is optimized using Derivative-Free Optimization methods.","category":"page"},{"location":"#[Installation]","page":"Home","title":"[Installation]","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To intall the package and its dependencies run the following in julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"  using Pkg\n  Pkg.add(url =)","category":"page"},{"location":"","page":"Home","title":"Home","text":"In addition, follow the instructions on Gurobi.jl to install the solver Gurobi.","category":"page"},{"location":"#[Example]","page":"Home","title":"[Example]","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"As an example, we try to solve a generator planning problem. The problem is based on example 6.5 in the Introduction to Linear Programming book by Dimitris Bertsimas and John N. Tsitsiklis. The data we use for the problem is in the    Generator_expansion subfolder in the examples folder. The following steps are followed:","category":"page"},{"location":"","page":"Home","title":"Home","text":"A high-level model and low-level model are formulated based on the full-space model and coded into separate files as functions. The high-level model is an aggregated version of model where we aggregate the system for entire time period. The low-level model involves fixing the capacity of the generators in the full-space model. The high-level model is parametrized based on the physics of the model. The high-level model is coded as a function which takes the tunable parameters as a parameters to the function and gives the high-level decisions (like the capacity of the gnerators) as an output. In this example, we store the high-level decision as a dictionary. The low-level model takes in the high-level decisions as parameters and outputs the objective function\nWe create a block of parameters and intitialize it with the initial set of parameters (init), lower bounds of parameters (lb),upper bounds of parameters ub and input_types (can be integer (\"I\") or real (\"R\")). In this example, the code is as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"  PAMSO_toy_params = PAMSO.PAMSO_params([1.0,1.0,0.0],[0.0,0.0,0.0],[10.0,10.0,1000.0], [\"R\",\"R\",\"R\"])","category":"page"},{"location":"","page":"Home","title":"Home","text":"We create a PAMSOblock and initialize it with the function to generate the high-level model (genhighlevel),the function to generate the low-level model (gen_lowlevel), the full-space model, number of parameters (dimmensions) and the parameters block. The code is as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"  PAMSO_toy = PAMSO.PAMSO_block(gen_highlevel, gen_lowlevel, fs_model, 3, params)","category":"page"},{"location":"","page":"Home","title":"Home","text":"We then run one of the DFO agorithms (\"MADS\",\"Bayesopt\" or \"PSO\") on the associated MBBF for a given number of function evaluations (approximate) like the following code: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"  PAMSO.run(PAMSO_toy,\"MADS\",300)","category":"page"},{"location":"","page":"Home","title":"Home","text":"PAMSOtoy.Parambest holds the best set of parameters after training the parameters using the DFO solvers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The solution can be compared to the solution from the full-space model. The full-space model is coded in the file fullspacemodel.jl. Camerin Lee constributed to coding the full space model and data for the example.","category":"page"},{"location":"#[Running-Cases](#example)","page":"Home","title":"Running Cases","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We have a few examples of cases in the examples folder. They are listed in documentation sections. The associated PAMSO block can be accessed using the gen_problem(case) function. For example, to access the generator expansion case, we can use the following code:","category":"page"},{"location":"","page":"Home","title":"Home","text":"  PAMSO.toy = gen_problem(\"Generator expansion\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"The overall structure of the PAMSO block and the associated functions is shown in here ","category":"page"},{"location":"#[Citation](#citation)","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Cite us  ","category":"page"},{"location":"func_struct/#Block-for-Tunable-Parameters","page":"PAMSO Elements","title":"Block for Tunable Parameters","text":"","category":"section"},{"location":"func_struct/","page":"PAMSO Elements","title":"PAMSO Elements","text":"The PAMSO_params is a structure which has the following fields","category":"page"},{"location":"func_struct/","page":"PAMSO Elements","title":"PAMSO Elements","text":"Field Name Description\ninit Vector of initial parameters for running the DFO algorithms\nlb Vector of lower bound of parameters\nub Vector of upper bound of parameters\ninput_types Vector of nature of parameters with \"R\" for real and \"I\" for integer","category":"page"},{"location":"func_struct/","page":"PAMSO Elements","title":"PAMSO Elements","text":"In order to modify the intial values,lower bounds, upper bound or nature of the tunable parameters, the following functions can be used:","category":"page"},{"location":"func_struct/","page":"PAMSO Elements","title":"PAMSO Elements","text":"Function Description Inputs\nset_initparams Modify the initial parameters used by the DFO solvers PAMSO problem block, vector of numbers with dimension as that of the parameters\nset_lb Modify the upper bound of parameters PAMSO problem block, vector of numbers with dimension as that of the parameters\nset_ub Modify the lower bound of parameters PAMSO problem block, vector of numbers with dimension as that of the parameters\nset_inputtype Modify the input type of parameters PAMSO problem block, vector of \"R\" (real) and \"I\"  (Integer) corresponding to each parameter (with dimension as that of the parameters)","category":"page"},{"location":"func_struct/#PAMSO-Block","page":"PAMSO Elements","title":"PAMSO Block","text":"","category":"section"},{"location":"func_struct/","page":"PAMSO Elements","title":"PAMSO Elements","text":"The PAMSO_block is a structure which has the following fields","category":"page"},{"location":"func_struct/","page":"PAMSO Elements","title":"PAMSO Elements","text":"Field Name Description\nhigh_level_model Function to generate the high-level model taking the vector of tunable parameters as input and returning the high-level decisions\nlow_level_model Function to generate the low-level model taking the high-level decisions as input and returning the corresponding objective of the multi-time scale optimization model\nfull_space_model JuMP model for the full-space problem\nMBBF Multi-time scale black  box function connecting the high-level and low-level model\ndimmensions Number of tunable parameters\nparam PAMSO_param block\nParam_best Best set of parameters after running the DFO algorithm","category":"page"},{"location":"func_struct/","page":"PAMSO Elements","title":"PAMSO Elements","text":"We initialize the high_level_model, low_level_model, full_space_model, dimmensions and param. MBBF is automatically created and Param_best is obtained after running the DFO solvers.","category":"page"},{"location":"func_struct/","page":"PAMSO Elements","title":"PAMSO Elements","text":"We have the following functions in the PAMSO package based on the PAMSO block.","category":"page"},{"location":"func_struct/","page":"PAMSO Elements","title":"PAMSO Elements","text":"Function Description Inputs\nset_hlmodel Modify the function for the high-level model PAMSO problem block, function\nset_llmodel Modify the function for the low-level model PAMSO problem block, function\nset_fsmodel Modify the full-space model PAMSO problem block, optimization model\nset_MBBF Modify the MBBF. Call this function after modifying the high-level or low-level model PAMSO problem block\ngen_problem Generate a PAMSO instance in the example folders Name of the instance\nrun Run the PAMSO algorithm on a PAMSO problem block PAMSO problem block,DFO Solver (\"MADS\",\"Bayesopt\",\"PSO\"), maximum number of function evaluations (approximate)","category":"page"},{"location":"func_struct/","page":"PAMSO Elements","title":"PAMSO Elements","text":"Back to Home","category":"page"}]
}
